version: '3.8'

services:
  # PostgreSQL Database - Shared database instance with separate databases for Kong and Konga
  postgres:
    image: postgres:13
    container_name: kong-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: postgres  # Default database
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      # Init script to create separate databases for Kong and Konga
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - kong-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgBouncer - PostgreSQL Connection Pooling for performance optimization
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: kong-pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-postgres}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DATABASES_DBNAME: kong
      POOL_MODE: ${PGBOUNCER_POOL_MODE:-transaction}
      MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-100}
      DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-20}
      MIN_POOL_SIZE: ${PGBOUNCER_MIN_POOL_SIZE:-5}
      RESERVE_POOL_SIZE: ${PGBOUNCER_RESERVE_POOL_SIZE:-3}
      AUTH_TYPE: ${PGBOUNCER_AUTH_TYPE:-md5}
    ports:
      - "6432:5432"  # PgBouncer port
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kong-net
    restart: unless-stopped
    volumes:
      - ./logs/pgbouncer:/var/log/pgbouncer

  # Kong Database Bootstrap - Runs Kong migrations once
  kong-bootstrap:
    image: kong:3.4-alpine
    container_name: kong-bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${POSTGRES_USER:-postgres}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-password}
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kong-net
    restart: "no"

  # Kong API Gateway - Main API Gateway service
  kong:
    image: kong:3.4-alpine
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${KONG_USE_PGBOUNCER:-postgres}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
      KONG_PG_USER: ${POSTGRES_USER:-postgres}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-password}
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      # Performance optimization
      KONG_NGINX_WORKER_PROCESSES: ${KONG_NGINX_WORKER_PROCESSES:-auto}
      KONG_NGINX_WORKER_CONNECTIONS: ${KONG_NGINX_WORKER_CONNECTIONS:-1024}
      KONG_MEM_CACHE_SIZE: ${KONG_MEM_CACHE_SIZE:-128m}
      KONG_LOG_LEVEL: ${KONG_LOG_LEVEL:-notice}
    volumes:
      - ./logs/kong:/var/log/kong
    ports:
      - "8000:8000"  # Kong proxy HTTP
      - "8001:8001"  # Kong admin API HTTP
      - "8443:8443"  # Kong proxy HTTPS
      - "8444:8444"  # Kong admin API HTTPS
    depends_on:
      kong-bootstrap:
        condition: service_completed_successfully
    networks:
      - kong-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3

  # Konga GUI - Web-based administration GUI for Kong
  konga:
    image: pantsel/konga:latest
    container_name: konga-gui
    environment:
      DB_ADAPTER: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DB_DATABASE: konga
      NODE_ENV: ${KONGA_ENV:-development}
      KONGA_HOOK_TIMEOUT: 10000
    volumes:
      - ./logs/konga:/app/logs
    ports:
      - "1337:1337"  # Konga web interface
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kong-net
    restart: unless-stopped

  # NGINX Load Balancer - Distributes traffic to Kong instances
  nginx:
    image: nginx:alpine
    container_name: kong-nginx-lb
    ports:
      - "80:80"      # NGINX proxy to Kong
      - "8080:8001"  # NGINX proxy to Kong Admin (use different port for security)
    volumes:
      - ./nginx/kong.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - kong
    networks:
      - kong-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

# Network configuration
networks:
  kong-net:
    driver: bridge
    name: kong-network
